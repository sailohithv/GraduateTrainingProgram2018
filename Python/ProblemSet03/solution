- ProblemSet03, January 03 2019
-- sai.lohith.vasireddi@accenture.com

/* <Question from the ProblemSet 03> */


1. A step size of -1 goes through the word backwards, so the slice [::-1] generates a reversed string. 
   Use this idiom to write a one-line version of is_palindrome

s=raw_input()
def is_palin(s):
    
    rs=s[::-1]
    
    if s==rs:
        print "is palindrome"
    else:
        print "not a plaindrome"

is_palin(s)


2. Write a function called rotate_word() that takes a string and an integer as parameters, and that returns a new string that contains 
   the letters from the original string "rotated" by the given amount. For example, "cheer" rotated by 7 is "jolly" and "melon" rotated
   by -10 is "cubed". You might want to use the built-in functions ord, which converts a character to a numeric code, and chr, 
   which converts numeric codes to characters.

s=raw_input()
n=int(raw_input())
def rotate_word():
    s1=""
    for i in s:
        n1=0
        n1=ord(i)+n
        s1+=chr(n1)
    return s1
print rotate_word()


3. In 1939 Ernest Vincent Wright published a 50,000 word novel called Gadsby that does not contain the letter "e."
   Since "e" is the most common letter in English, that’s not easy to do. In fact, it is difficult to construct a solitary thought 
   without using that most common symbol. It is slow going at first, but with caution and hours of training you can gradually gain facility. All right, I’ll stop now.
   Write a function called has_no_e that returns True if the given word doesn’t have the letter "e" in it.

s=raw_input()

def has_no_e():
    c=0
    for i in s:
        if i=="e":
            break
        else:
            c+=1
            continue
    if c==len(s):
        return True
print has_no_e()


4. Modify the above program to print only the words that have no “e” and compute the percentage of the words in the list have no “e.”

s=raw_input()
def no_e():
    l=s.split()
    print l
    l1=[]
    c=0
    for j in l:
        
        if (j.__contains__('e')) or (j.__contains__('E')):
            continue
        else:
            l1.append(j)
    print l1
    per=len(l1)*100/float(len(l))
    print per
no_e()


5. Write a function named avoids that takes a word and a string of forbidden letters, and that returns True if the word doesn’t use 
   any of the forbidden letters.

word=raw_input()
string1=raw_input()
def avoids():
    c=0
    for i in string1:
        if word.__contains__(i):
            continue
        else:
            c+=1
    if c==len(string1):
        print "True"
avoids()


6. Modify your program to prompt the user to enter a string of forbidden letters and then print the number of words that don’t contain 
   any of them. Can you find a combination of 5 forbidden letters that excludes the smallest number of words?

s=raw_input()
string1=raw_input()
def avoids():
    c=0
    l=s.split()
    l1=[]
    for word in l:
        c=0
        for i in string1:
            if word.__contains__(i):
                continue
            else:
                c+=1
            if c==len(string1):
                l1.append(word)
    print l1
avoids()


7. Write a function named using_only() that takes a word and a string of letters, and that returns True if the word contains 
   only letters in the list. Can you make a sentence using only the letters acefhlo? Other than "Hoe alfalfa?"

s=raw_input()
string1=raw_input()
s2=s.replace(" ","")

def only():
    c=0
    l=s.split()
    l1=[]
  
    for word in l:
        
        for j in word:
            
            if string1.__contains__(j):
                c+=1
                
            else:
                break
    if c==len(s2):
        
        print "true"
    
only()


8. Write a function called is_abecedarian that returns True if the letters in a word appear in alphabetical order (double letters are ok). 
   How many abecedarian words are there? (i.e) "Abhor" or "Aux" or "Aadil" should return "True" Banana should return "False"

s=raw_input()

def is_abecedarian():
    c=1
    for i in range(1,len(s)):
        if s[i]>=s[i-1]:
            c+=1
    if c==len(s):
        return True
print is_abecedarian()


9. Write a function called is_sorted that takes a list as a parameter and returns True if the list is sorted in ascending order and False
   otherwise. You can assume (as a precondition) that the elements of the list can be compared with the relational operators <, >, etc. 
   For example, is_sorted([1,2,2]) should return True and is_sorted(['b','a']) should return False.

s = raw_input()
li = map(str, s.split())
def is_sorted():
    c=1
    for i in range(1,len(li)):
        if li[i]>=li[i-1]:
            c+=1
    if c==len(li):
        return "True"
    else:
        return "False"
print is_sorted()


10. Two words are anagrams if you can rearrange the letters from one to spell the other.
    Write a function called is_anagram that takes two strings and returns True if they are anagrams.

from collections import Counter

s1=raw_input()
s2=raw_input()

def is_anagram():
    c1=Counter(s1)
    c2=Counter(s2)
    if c1==c2:
        return True
    else:
        return False

print is_anagram()
