- ProblemSet03, January 03 2019
-- sai.lohith.vasireddi@accenture.com

/* <Question from the ProblemSet 03> */


1.

s=raw_input()
def is_palin(s):
    
    rs=s[::-1]
    
    count = 0
    t="is palindrome"
    f="not a palindrome"
    if s==rs:
        print "is palindrome"
    else:
        print "not a plaindrome"

is_palin(s)


2.

s=raw_input()
n=int(raw_input())
def rotate_word():
    s1=""
    for i in s:
        n1=0
        n1=ord(i)+n
        s1+=chr(n1)
    return s1
print rotate_word()


3.

s=raw_input()

def has_no_e():
    c=0
    for i in s:
        if i=="e":
            break
        else:
            c+=1
            continue
    if c==len(s):
        return True
print has_no_e()


4.

s=raw_input()
def no_e():
    l=s.split()
    print l
    l1=[]
    c=0
    for j in l:
        
        if (j.__contains__('e')) or (j.__contains__('E')):
            continue
        else:
            l1.append(j)
    print l1
    per=len(l1)*100/float(len(l))
    print per
no_e()


5.

word=raw_input()
string1=raw_input()
def avoids():
    c=0
    for i in string1:
        if word.__contains__(i):
            continue
        else:
            c+=1
    if c==len(string1):
        print "True"
avoids()


6.

s=raw_input()
string1=raw_input()
def avoids():
    c=0
    l=s.split()
    l1=[]
    for word in l:
        c=0
        for i in string1:
            if word.__contains__(i):
                continue
            else:
                c+=1
            if c==len(string1):
                l1.append(word)
    print l1
avoids()


7.

s=raw_input()
string1=raw_input()
s2=s.replace(" ","")

def only():
    c=0
    l=s.split()
    l1=[]
  
    for word in l:
        
        for j in word:
            
            if string1.__contains__(j):
                c+=1
                
            else:
                break
    if c==len(s2):
        
        print "true"
    
only()


8.

s=raw_input()

def is_abecedarian():
    c=1
    for i in range(1,len(s)):
        if s[i]>=s[i-1]:
            c+=1
    if c==len(s):
        return True
print is_abecedarian()


9.

s = raw_input()
li = map(str, s.split())
def is_sorted():
    c=1
    for i in range(1,len(li)):
        if li[i]>=li[i-1]:
            c+=1
    if c==len(li):
        return "True"
    else:
        return "False"
print is_sorted()


10.

from collections import Counter

s1=raw_input()
s2=raw_input()

def is_anagram():
    c1=Counter(s1)
    c2=Counter(s2)
    if c1==c2:
        return True
    else:
        return False

print is_anagram()
