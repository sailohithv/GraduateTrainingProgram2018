- ProblemSet02, January 03 2018
-- sai.lohith.vasireddi@accenture.com

/* <Question from the ProblemSet 03> */


1. The greatest common divisor (GCD) of a and b is the largest number that divides both of them with no remainder. 
   One way to find the GCD of two numbers is based on the observation that if r is the remainder when a is divided by b,
   then gcd(a, b) = gcd(b, r). As a base case, we can use gcd(a, 0) = a.
   Write a function called gcd that takes parameters a and b and returns their greatest common divisor.

a=int(raw_input())
b=int(raw_input())
def gcd():
  la=[]
  lb=[]

  for i in range(1,a+1):
      if a%i==0:
          la.append(i)
          print la

  for i in range(1,b+1):
      if b%i==0:
          lb.append(i)
          print lb

  s1=set(la)
  s2=set(lb)

  cf=s1.intersection(s2)

  gcd=max(cf)

  print gcd

gcd()

2. A number, a, is a power of b if it is divisible by b and a/b is a power of b.Write a function called is_power that takes parameters 
   a and b and returns True if a is a power of b. Note: you will have to think about the base case.

a=int(raw_input())
b=int(raw_input())

div=a/b
if (a%b==0) and (div%b==0):
    print "True"
else:
    print "False"


3. Observe the following function definitions. They Calculate the Factorial as per the Mathematical definition 1! = 1 (n + 1)! = (n + 1) * n! 
   Implement factI(n) as an Iterative Implementation & factR(n) as a Recursive Implementation
   
   def factI(n):
	"""Assumes that n is an int > 0
	Returns n!
	Uses Iterative Implementation"""
	
def factR(n):
	"""Assumes that n is an int > 0
	Returns n!
	Uses Recursive Implementation"""
------------
Iterative factorial

n=int(raw_input())

def ifact():
    
    fact=1
    for i in range(n,0,-1):
        fact*=i
    print  "iterative facatorial:",fact
ifact()
----
recursive factorial

def rfact(n):
    if n>=1:
        return n*rfact(n-1)
    else:
        return 1

print rfact(n)


4. Write a program that computes the decimal equivalent of the binary number 10011?

a=raw_input()
b=int(a)
sum=0
l=len(a)
for i in range(l):
    sum+=(b%10)*pow(2,i)
    b=b/10

print sum


5. Implement a function that meets the specification below. Use a try-except block.

 def sumDigits(s):
	"""Assumes s is a string
	Returns the sum of the decimal digits in s
	For example, if s is 'a2b3c' it returns 5"""
--------------
class Networkerror(RuntimeError):
  def __init__(self, arg):
    self.args = arg
try:
  sum1=0
  s=raw_input()
  for i in s:
    if(i.isdigit()):
      sum1+=int(i)
    else:
      continue
  if sum1==0:
    raise ValueError("no number found")
  else:
    print sum1
except ValueError as e:
   print("".join(e.args))


6. Implement a function that satisfies the specification. Use a try-except block.

def findAnEven(l):
	"""Assumes l is a list of integers
	Returns the first even number in l
	Raises ValueError if l does not contain an even number"""
  ---------------

l=[1,3,5,7,9]
c = 0
try:
  for i in range(len(l)):
    if l[i]%2==0:
      print l[i]
      break
    else:
      c+=1
  if c == len(l):
 
    raise ValueError("no even number found")

except ValueError as e:
  print("".join(e.args))


7.  A palindrome is a word that is spelled the same backward and forward, like "Malayalam" and "Noon" .
Recursively, a word is a palindrome if the first and last letters are the same and the middle is a palindrome. 
Write a function called is_palindrome that takes a string argument and returns True if it is a palindrome and False otherwise.
Remember that you can use the built-in function len to check the length of a string.

def isPalindrome(s):
	"""Assumes s is a str
	Returns True if s is a palindrome; False otherwise.
	Punctuation marks, blanks, and capitalization are
	ignored."""
  -----------

a=raw_input()
s=""
for i in a:
    if (i.isalpha())==True:
        s+=i
    else:
        pass
s1=s.lower()
s2=s1
s1=list(s1)
rev=""
for i in range(len(s1)-1,-1,-1):
    rev+=s1[i]


if (s2==rev):
   
    print "Palindrome"
else:
    print "Not a Palindrome"



9.a.  Write a function NewtonSqrt() to abstract the Newton's Method of calculation Square roots.

def nsr():
  n=int(raw_input())
  app=n/float(2)
  ba=(app+(n/app))/float(2)
  while app!=ba:
      app=ba
      ba=(app+(n/app))/float(2)
  print ba
 nsr()


9.b. Write a function named test_square_root that prints a table like this:

    Number |  NewtonSqrt  |    math.sqr  | Difference 
    -------|--------------|--------------|------------------
	1.0|           1.0|           1.0|               0.0 
	2.0| 1.41421356237|1.41421356237 | 2.22044604925e-16
	3.0| 1.73205080757|1.73205080757 |               0.0
	4.0|           2.0|           2.0|               0.0
	5.0| 2.2360679775 |  2.2360679775|               0.0
	6.0| 2.44948974278| 2.44948974278|               0.0
	7.0| 2.64575131106| 2.64575131106|               0.0
	8.0| 2.82842712475| 2.82842712475|  4.4408920985e-16
	9.0|           3.0|           3.0|               0.0

test = []
test1 = []
def nsr():
    for n in range(1,10):
        app=n/float(2)
        ba=(app+(n/app))/float(2)
        while app!=ba:
            app=ba
            ba=(app+(n/app))/float(2)
        nsr=ba

        test.append(nsr)
       
nsr()


def msr():
    for n in range(1,10):
        msr=pow(n,0.5)
        test1.append(msr)
    
msr()


print"----------------------------------------------------------"
print "Number|","N.Square Root|","\t","M.Square Root|","\t","Difference"
print"----------------------------------------------------------"
for i in range(min(len(test),len(test1))):
    
    print "   ",i+1,"|\t","%.11f|" %test[i],"\t","%.11f|" %test1[i],"\t",test[i]-test1[i]
print"----------------------------------------------------------"
